# -*- coding: utf-8 -*-import osimport jsonimport arcpyCLASSIFY_SELECTED_FILE = Noneclass Toolbox(object):    def __init__(self):        self.label = 'WCMonitor'        self.alias = 'WCMonitor'        self.tools = [            CreateNewSite,            IngestNewUAVCapture,            ClassifyUAVCapture,            GenerateFractions,            DisplayData        ]class CreateNewSite(object):    def __init__(self):        self.label = 'Create New Site'        self.description = 'Create a new rehabilitation site and project data structure.'        self.canRunInBackground = False    def getParameterInfo(self):        params = []        p00 = arcpy.Parameter(displayName='New Project Folder',                              name='in_output_folder',                              datatype='DEFolder',                              parameterType='Required',                              direction='Input')        params.append(p00)        p01 = arcpy.Parameter(displayName='Rehabilitation Date and Time',                              name='in_rehab_datetime',                              datatype='GPDate',                              parameterType='Required',                              direction='Input')        params.append(p01)        p02 = arcpy.Parameter(displayName='Flight Date and Time',                              name='in_flight_datetime',                              datatype='GPDate',                              parameterType='Required',                              direction='Input')        params.append(p02)        p03 = arcpy.Parameter(displayName='Blue Band',                              name='in_blue_band',                              datatype='GPRasterLayer',                              parameterType='Required',                              direction='Input')        params.append(p03)        p04 = arcpy.Parameter(displayName='Green Band',                              name='in_green_band',                              datatype='GPRasterLayer',                              parameterType='Required',                              direction='Input')        params.append(p04)        p05 = arcpy.Parameter(displayName='Red Band',                              name='in_red_band',                              datatype='GPRasterLayer',                              parameterType='Required',                              direction='Input')        params.append(p05)        p06 = arcpy.Parameter(displayName='Red Edge Band',                              name='in_redge_band',                              datatype='GPRasterLayer',                              parameterType='Required',                              direction='Input')        params.append(p06)        p07 = arcpy.Parameter(displayName='Near-Infrared (NIR) Band',                              name='in_nir_band',                              datatype='GPRasterLayer',                              parameterType='Required',                              direction='Input')        params.append(p07)        p08 = arcpy.Parameter(displayName='Digital Surface Model (DSM) Band',                              name='in_dsm_band',                              datatype='GPRasterLayer',                              parameterType='Required',                              direction='Input')        params.append(p08)        p09 = arcpy.Parameter(displayName='Digital Terrain Model (DTM) Band',                              name='in_dtm_band',                              datatype='GPRasterLayer',                              parameterType='Required',                              direction='Input')        params.append(p09)        return params    def isLicensed(self):        if arcpy.CheckExtension('Spatial') != 'Available':            return False        return True    def updateParameters(self, parameters):        return    def updateMessages(self, parameters):        return    def execute(self, parameters, messages):        from geoprocessors import createnewsite        createnewsite.execute(parameters)        return    def postExecute(self, parameters):        returnclass IngestNewUAVCapture(object):    def __init__(self):        self.label = 'Ingest New UAV Capture'        self.description = 'Ingests a new UAV image capture.'        self.canRunInBackground = False    def getParameterInfo(self):        params = []        p00 = arcpy.Parameter(displayName='Existing Project File',                              name='in_project_file',                              datatype='DEFile',                              parameterType='Required',                              direction='Input')        p00.filter.list = ['json']        params.append(p00)        p01 = arcpy.Parameter(displayName='Flight Date and Time',                              name='in_flight_datetime',                              datatype='GPDate',                              parameterType='Required',                              direction='Input')        params.append(p01)        p02 = arcpy.Parameter(displayName='Blue Band',                              name='in_blue_band',                              datatype='GPRasterLayer',                              parameterType='Required',                              direction='Input')        params.append(p02)        p03 = arcpy.Parameter(displayName='Green Band',                              name='in_green_band',                              datatype='GPRasterLayer',                              parameterType='Required',                              direction='Input')        params.append(p03)        p04 = arcpy.Parameter(displayName='Red Band',                              name='in_red_band',                              datatype='GPRasterLayer',                              parameterType='Required',                              direction='Input')        params.append(p04)        p05 = arcpy.Parameter(displayName='Red Edge Band',                              name='in_redge_band',                              datatype='GPRasterLayer',                              parameterType='Required',                              direction='Input')        params.append(p05)        p06 = arcpy.Parameter(displayName='Near-Infrared (NIR) Band',                              name='in_nir_band',                              datatype='GPRasterLayer',                              parameterType='Required',                              direction='Input')        params.append(p06)        p07 = arcpy.Parameter(displayName='Digital Surface Model (DSM) Band',                              name='in_dsm_band',                              datatype='GPRasterLayer',                              parameterType='Required',                              direction='Input')        params.append(p07)        p08 = arcpy.Parameter(displayName='Digital Terrain Model (DTM) Band',                              name='in_dtm_band',                              datatype='GPRasterLayer',                              parameterType='Required',                              direction='Input')        params.append(p08)        return params    def isLicensed(self):        if arcpy.CheckExtension('Spatial') != 'Available':            return False        return True    def updateParameters(self, parameters):        return    def updateMessages(self, parameters):        return    def execute(self, parameters, messages):        from geoprocessors import ingestnewuavcapture        ingestnewuavcapture.execute(parameters)        return    def postExecute(self, parameters):        returnclass ClassifyUAVCapture(object):    def __init__(self):        self.label = 'Classify UAV Capture'        self.description = 'Classify UAV capture into Native, Weed or Other classes.'        self.canRunInBackground = False    def getParameterInfo(self):        params = []        p00 = arcpy.Parameter(displayName='Existing Project File',                              name='in_project_file',                              datatype='DEFile',                              parameterType='Required',                              direction='Input')        p00.filter.list = ['json']        params.append(p00)        p01 = arcpy.Parameter(displayName='Flight Date and Time',                              name='in_flight_datetime',                              datatype='GPString',                              parameterType='Required',                              direction='Input')        p01.filter.type = 'ValueList'        p01.filter.list = []        p01.value = None        params.append(p01)        p02 = arcpy.Parameter(displayName='Region of Interest Areas',                              name='in_roi_feat',                              datatype='GPFeatureLayer',                              parameterType='Required',                              direction='Input')        p02.filter.list = ['Polygon']        params.append(p02)        return params    def isLicensed(self):        if arcpy.CheckExtension('Spatial') != 'Available':            return False        return True    def updateParameters(self, parameters):        global CLASSIFY_SELECTED_FILE        if parameters[0].value != CLASSIFY_SELECTED_FILE:            CLASSIFY_SELECTED_FILE = parameters[0].valueAsText            if os.path.exists(CLASSIFY_SELECTED_FILE):                try:                    fp = open(CLASSIFY_SELECTED_FILE, 'r')                    meta = json.load(fp)                    fp.close()                    capture_dates = []                    for item in meta['data']:                        if item['classified'] == False:                            capture_dates.append(item['capture_date'])                except:                    capture_dates = []                parameters[1].filter.list = capture_dates        return    def updateMessages(self, parameters):        return    def execute(self, parameters, messages):        from geoprocessors import classifyuavcapture        classifyuavcapture.execute(parameters)        return    def postExecute(self, parameters):        returnclass GenerateFractions(object):    def __init__(self):        self.label = 'Generate Fractions'        self.description = 'Generate fractional layers of Native, Weed or Other classes.'        self.canRunInBackground = False    def getParameterInfo(self):        params = []        p00 = arcpy.Parameter(displayName='Existing Project File',                              name='in_project_file',                              datatype='DEFile',                              parameterType='Required',                              direction='Input')        p00.filter.list = ['json']        params.append(p00)        return params    def isLicensed(self):        if arcpy.CheckExtension('Spatial') != 'Available':            return False        return True    def updateParameters(self, parameters):        return    def updateMessages(self, parameters):        return    def execute(self, parameters, messages):        from geoprocessors import generatefractions        generatefractions.execute(parameters)        return    def postExecute(self, parameters):        returnclass GenerateTrend(object):    def __init__(self):        self.label = 'Generate Trend'        self.description = 'Generates trend of each fraction layer over time series.'        self.canRunInBackground = False    def getParameterInfo(self):        params = []        p00 = arcpy.Parameter(displayName='Existing Project File',                              name='in_project_file',                              datatype='DEFile',                              parameterType='Required',                              direction='Input')        p00.filter.list = ['json']        params.append(p00)        return params    def isLicensed(self):        if arcpy.CheckExtension('Spatial') != 'Available':            return False        return True    def updateParameters(self, parameters):        return    def updateMessages(self, parameters):        return    def execute(self, parameters, messages):        from geoprocessors import generatetrend        generatetrend.execute(parameters)        return    def postExecute(self, parameters):        returnclass DisplayData(object):    def __init__(self):        self.label = 'Display Data'        self.description = 'Displays various layers on the currently active map.'        self.canRunInBackground = False    def getParameterInfo(self):        params = []        p00 = arcpy.Parameter(displayName='Existing Project File',                              name='in_project_file',                              datatype='DEFile',                              parameterType='Required',                              direction='Input')        p00.filter.list = ['json']        params.append(p00)        return params    def isLicensed(self):        if arcpy.CheckExtension('Spatial') != 'Available':            return False        return True    def updateParameters(self, parameters):        return    def updateMessages(self, parameters):        return    def execute(self, parameters, messages):        from geoprocessors import displaydata        displaydata.execute(parameters)        return    def postExecute(self, parameters):        return