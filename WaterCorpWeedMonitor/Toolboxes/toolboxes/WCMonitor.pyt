# -*- coding: utf-8 -*-import osimport jsonimport arcpyclass Toolbox(object):    def __init__(self):        self.label = 'WCMonitor'        self.alias = 'WCMonitor'        self.tools = [            CreateNewSite,            IngestNewUAVCapture,            ClassifyUAVCapture,            GenerateFractions,            GenerateTrend,            DetectChange,            DisplayData,            Testing        ]class CreateNewSite(object):    def __init__(self):        self.label = 'Create New Site'        self.description = 'Create a new rehabilitation site and project data structure.'        self.canRunInBackground = False    def getParameterInfo(self):        params = []        p00 = arcpy.Parameter(displayName='New Project Folder',                              name='in_output_folder',                              datatype='DEFolder',                              parameterType='Required',                              direction='Input')        params.append(p00)        p01 = arcpy.Parameter(displayName='Rehabilitation Date and Time',                              name='in_rehab_datetime',                              datatype='GPDate',                              parameterType='Required',                              direction='Input')        params.append(p01)        p02 = arcpy.Parameter(displayName='Flight Date and Time',                              name='in_flight_datetime',                              datatype='GPDate',                              parameterType='Required',                              direction='Input')        params.append(p02)        p03 = arcpy.Parameter(displayName='Blue Band',                              name='in_blue_band',                              datatype='GPRasterLayer',                              parameterType='Required',                              direction='Input')        params.append(p03)        p04 = arcpy.Parameter(displayName='Green Band',                              name='in_green_band',                              datatype='GPRasterLayer',                              parameterType='Required',                              direction='Input')        params.append(p04)        p05 = arcpy.Parameter(displayName='Red Band',                              name='in_red_band',                              datatype='GPRasterLayer',                              parameterType='Required',                              direction='Input')        params.append(p05)        p06 = arcpy.Parameter(displayName='Red Edge Band',                              name='in_redge_band',                              datatype='GPRasterLayer',                              parameterType='Required',                              direction='Input')        params.append(p06)        p07 = arcpy.Parameter(displayName='Near-Infrared (NIR) Band',                              name='in_nir_band',                              datatype='GPRasterLayer',                              parameterType='Required',                              direction='Input')        params.append(p07)        p08 = arcpy.Parameter(displayName='Digital Surface Model (DSM) Band',                              name='in_dsm_band',                              datatype='GPRasterLayer',                              parameterType='Required',                              direction='Input')        params.append(p08)        p09 = arcpy.Parameter(displayName='Digital Terrain Model (DTM) Band',                              name='in_dtm_band',                              datatype='GPRasterLayer',                              parameterType='Required',                              direction='Input')        params.append(p09)        return params    def isLicensed(self):        has_licenses = True        if arcpy.CheckExtension('Spatial') != 'Available':            has_licenses = False        elif arcpy.CheckExtension('ImageAnalyst') != 'Available':            has_licenses = False        return has_licenses    def updateParameters(self, parameters):        return    def updateMessages(self, parameters):        return    def execute(self, parameters, messages):        from geoprocessors import createnewsite        createnewsite.execute(parameters)        return    def postExecute(self, parameters):        returnclass IngestNewUAVCapture(object):    def __init__(self):        self.label = 'Ingest New UAV Capture'        self.description = 'Ingests a new UAV image capture into an existing project.'        self.canRunInBackground = False    def getParameterInfo(self):        params = []        p00 = arcpy.Parameter(displayName='Existing Project File',                              name='in_project_file',                              datatype='DEFile',                              parameterType='Required',                              direction='Input')        p00.filter.list = ['json']        params.append(p00)        p01 = arcpy.Parameter(displayName='Flight Date and Time',                              name='in_flight_datetime',                              datatype='GPDate',                              parameterType='Required',                              direction='Input')        params.append(p01)        p02 = arcpy.Parameter(displayName='Blue Band',                              name='in_blue_band',                              datatype='GPRasterLayer',                              parameterType='Required',                              direction='Input')        params.append(p02)        p03 = arcpy.Parameter(displayName='Green Band',                              name='in_green_band',                              datatype='GPRasterLayer',                              parameterType='Required',                              direction='Input')        params.append(p03)        p04 = arcpy.Parameter(displayName='Red Band',                              name='in_red_band',                              datatype='GPRasterLayer',                              parameterType='Required',                              direction='Input')        params.append(p04)        p05 = arcpy.Parameter(displayName='Red Edge Band',                              name='in_redge_band',                              datatype='GPRasterLayer',                              parameterType='Required',                              direction='Input')        params.append(p05)        p06 = arcpy.Parameter(displayName='Near-Infrared (NIR) Band',                              name='in_nir_band',                              datatype='GPRasterLayer',                              parameterType='Required',                              direction='Input')        params.append(p06)        p07 = arcpy.Parameter(displayName='Digital Surface Model (DSM) Band',                              name='in_dsm_band',                              datatype='GPRasterLayer',                              parameterType='Required',                              direction='Input')        params.append(p07)        p08 = arcpy.Parameter(displayName='Digital Terrain Model (DTM) Band',                              name='in_dtm_band',                              datatype='GPRasterLayer',                              parameterType='Required',                              direction='Input')        params.append(p08)        return params    def isLicensed(self):        has_licenses = True        if arcpy.CheckExtension('Spatial') != 'Available':            has_licenses = False        elif arcpy.CheckExtension('ImageAnalyst') != 'Available':            has_licenses = False        return has_licenses    def updateParameters(self, parameters):        return    def updateMessages(self, parameters):        return    def execute(self, parameters, messages):        from geoprocessors import ingestnewuavcapture        ingestnewuavcapture.execute(parameters)        return    def postExecute(self, parameters):        returnclass ClassifyUAVCapture(object):    def __init__(self):        self.label = 'Classify UAV Capture'        self.description = 'Classify UAV capture into Native, Weed or Other classes.'        self.canRunInBackground = False    def getParameterInfo(self):        params = []        p00 = arcpy.Parameter(displayName='Existing Project File',                              name='in_project_file',                              datatype='DEFile',                              parameterType='Required',                              direction='Input')        p00.filter.list = ['json']        params.append(p00)        p01 = arcpy.Parameter(displayName='UAV Capture to Classify',                              name='in_capture_datetime',                              datatype='GPString',                              parameterType='Required',                              direction='Input')        p01.filter.type = 'ValueList'        p01.filter.list = []        p01.value = None        params.append(p01)        p02 = arcpy.Parameter(displayName='Include Prior Classifications',                              name='in_include_prior',                              datatype='GPBoolean',                              parameterType='Required',                              direction='Input')        p02.value = False        params.append(p02)        p03 = arcpy.Parameter(displayName='Field Training Areas',                              name='in_roi_feat',                              datatype='GPFeatureLayer',                              parameterType='Required',                              direction='Input')        p03.filter.list = ['Polygon']        params.append(p03)        return params    def isLicensed(self):        has_licenses = True        if arcpy.CheckExtension('Spatial') != 'Available':            has_licenses = False        elif arcpy.CheckExtension('ImageAnalyst') != 'Available':            has_licenses = False        return has_licenses    def updateParameters(self, parameters):        if not parameters[0].altered:            parameters[1].value = None            parameters[1].filter.list = []        else:            try:                fp = open(parameters[0].valueAsText, 'r')                meta = json.load(fp)                fp.close()                exclude_keys = ['project_name', 'date_created', 'date_rehab']                if not parameters[0].hasBeenValidated or not parameters[2].hasBeenValidated:                    capture_dates = []                    for k, v in meta.items():                        if k not in exclude_keys:                            if parameters[2].value is False:                                if v['classified'] is False:                                    capture_dates.append(v['capture_date'])                            else:                                capture_dates.append(v['capture_date'])                    parameters[1].value = None                    parameters[1].filter.list = capture_dates            except:                parameters[1].value = None                parameters[1].filter.list = []        return    def updateMessages(self, parameters):        return    def execute(self, parameters, messages):        from geoprocessors import classifyuavcapture        classifyuavcapture.execute(parameters)        return    def postExecute(self, parameters):        returnclass DetectChange(object):    def __init__(self):        self.label = 'Detect Change'        self.description = 'Detect "from-to" class changes between UAV and Sentinel 2 data.'        self.canRunInBackground = False    def getParameterInfo(self):        params = []        p00 = arcpy.Parameter(displayName='Existing Project File',                              name='in_project_file',                              datatype='DEFile',                              parameterType='Required',                              direction='Input')        p00.filter.list = ['json']        params.append(p00)        return params    def isLicensed(self):        has_licenses = True        if arcpy.CheckExtension('Spatial') != 'Available':            has_licenses = False        elif arcpy.CheckExtension('ImageAnalyst') != 'Available':            has_licenses = False        return has_licenses    def updateParameters(self, parameters):        return    def updateMessages(self, parameters):        return    def execute(self, parameters, messages):        from geoprocessors import detectchange        detectchange.execute(parameters)        return    def postExecute(self, parameters):        returnclass GenerateFractions(object):    def __init__(self):        self.label = 'Generate Fractions'        self.description = 'Generate fractional layers of Native, Weed or Other classes.'        self.canRunInBackground = False    def getParameterInfo(self):        params = []        p00 = arcpy.Parameter(displayName='Existing Project File',                              name='in_project_file',                              datatype='DEFile',                              parameterType='Required',                              direction='Input')        p00.filter.list = ['json']        params.append(p00)        p01 = arcpy.Parameter(displayName='UAV Capture to Classify',                      name='in_capture_datetime',                      datatype='GPString',                      parameterType='Required',                      direction='Input')        p01.filter.type = 'ValueList'        p01.filter.list = []        p01.value = None        params.append(p01)        return params    def isLicensed(self):        has_licenses = True        if arcpy.CheckExtension('Spatial') != 'Available':            has_licenses = False        elif arcpy.CheckExtension('ImageAnalyst') != 'Available':            has_licenses = False        return has_licenses    def updateParameters(self, parameters):        if not parameters[0].altered:            parameters[1].value = None            parameters[1].filter.list = []        else:            try:                fp = open(parameters[0].valueAsText, 'r')                meta = json.load(fp)                fp.close()                exclude_keys = ['project_name', 'date_created', 'date_rehab']                if not parameters[0].hasBeenValidated:                    capture_dates = []                    for k, v in meta.items():                        if k not in exclude_keys:                            if v['classified'] is True:                                capture_dates.append(v['capture_date'])                    parameters[1].value = None                    parameters[1].filter.list = capture_dates            except:                parameters[1].value = None                parameters[1].filter.list = []        return    def updateMessages(self, parameters):        return    def execute(self, parameters, messages):        from geoprocessors import generatefractions        generatefractions.execute(parameters)        return    def postExecute(self, parameters):        returnclass GenerateTrend(object):    def __init__(self):        self.label = 'Generate Trend'        self.description = 'Generates trend of each fraction layer over time series.'        self.canRunInBackground = False    def getParameterInfo(self):        params = []        p00 = arcpy.Parameter(displayName='Existing Project File',                              name='in_project_file',                              datatype='DEFile',                              parameterType='Required',                              direction='Input')        p00.filter.list = ['json']        params.append(p00)        return params    def isLicensed(self):        has_licenses = True        if arcpy.CheckExtension('Spatial') != 'Available':            has_licenses = False        elif arcpy.CheckExtension('ImageAnalyst') != 'Available':            has_licenses = False        return has_licenses    def updateParameters(self, parameters):        return    def updateMessages(self, parameters):        return    def execute(self, parameters, messages):        from geoprocessors import generatetrend        generatetrend.execute(parameters)        return    def postExecute(self, parameters):        returnclass DisplayData(object):    def __init__(self):        self.label = 'Display Data'        self.description = 'Displays previously created data on the currently active map.'        self.canRunInBackground = False    def getParameterInfo(self):        params = []        p00 = arcpy.Parameter(displayName='Existing Project File',                              name='in_project_file',                              datatype='DEFile',                              parameterType='Required',                              direction='Input')        p00.filter.list = ['json']        params.append(p00)        p01 = arcpy.Parameter(displayName='UAV Capture to Visualise',                              name='in_capture_datetime',                              datatype='GPString',                              parameterType='Required',                              direction='Input')        p01.filter.type = 'ValueList'        p01.filter.list = []        p01.value = None        params.append(p01)        p02 = arcpy.Parameter(displayName='Layers to Visualise',                              name='in_layers_to_visualise',                              datatype='GPString',                              parameterType='Required',                              direction='Input',                              multiValue=True)        p02.filter.type = 'ValueList'        lyrs = ['UAV RGB', 'UAV NDVI', 'UAV Classified', 'S2 NDVI', 'S2 Fractions']        p02.filter.list = lyrs        p02.value = lyrs        params.append(p02)        return params    def isLicensed(self):        has_licenses = True        if arcpy.CheckExtension('Spatial') != 'Available':            has_licenses = False        elif arcpy.CheckExtension('ImageAnalyst') != 'Available':            has_licenses = False        return has_licenses    def updateParameters(self, parameters):        if not parameters[0].altered:            parameters[1].value = None            parameters[1].filter.list = []        else:            try:                fp = open(parameters[0].valueAsText, 'r')                meta = json.load(fp)                fp.close()                exclude_keys = ['project_name', 'date_created', 'date_rehab']                if not parameters[0].hasBeenValidated:                    capture_dates = []                    for k, v in meta.items():                        if k not in exclude_keys:                            capture_dates.append(v['capture_date'])                    parameters[1].value = None                    parameters[1].filter.list = capture_dates            except:                parameters[1].value = None                parameters[1].filter.list = []    def updateMessages(self, parameters):        return    def execute(self, parameters, messages):        from geoprocessors import displaydata        displaydata.execute(parameters)        return    def postExecute(self, parameters):        returnclass Testing(object):    def __init__(self):        self.label = 'Testing'        self.description = 'Temporary tool for testing.'        self.canRunInBackground = False    def getParameterInfo(self):        params = []        p00 = arcpy.Parameter(displayName='New Project Folder',                              name='in_output_folder',                              datatype='DEFolder',                              parameterType='Required',                              direction='Input')        params.append(p00)        return params    def isLicensed(self):        return True    def updateParameters(self, parameters):        return    def updateMessages(self, parameters):        return    def execute(self, parameters, messages):        from geoprocessors import testing        testing.execute(parameters)        return    def postExecute(self, parameters):        return